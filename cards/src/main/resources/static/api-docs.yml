openapi: 3.0.1
info:
  title: Cards Microservice REST API documentation
  description: Microservice demo built to manage a bank's account cards
  contact:
    name: Omar Abdel Rehim
    email: omarabdelrehim8@gmail.com
  version: v1
servers:
  - url: http://localhost:9000
    description: Generated server url
tags:
  - name: CRUD REST APIs For Cards Microservice
    description: REST APIs to create, update, fetch and delete cards details
paths:
  /api/cards/update/{cardNumber}:
    put:
      tags:
        - CRUD REST APIs For Cards Microservice
      summary: Update Card Monthly Purchase Limit
      description: REST API to update card's monthly purchase limit.
      operationId: updateCardTotalLimit
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            pattern: (^$|[0-9]{12})
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card_OnUpdate'
        required: true
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response_OnUpdateAndOnDelete'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/cards/{customerId}/create/debit-card:
    post:
      tags:
        - CRUD REST APIs For Cards Microservice
      summary: Create Debit Card
      description: REST API to create a debit card.
      operationId: createDebitCard
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '201':
          description: HTTP Status CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/cards/{customerId}/create/credit-card:
    post:
      tags:
        - CRUD REST APIs For Cards Microservice
      summary: Create Credit Card
      description: REST API to create a credit card.
      operationId: createCreditCard
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '201':
          description: HTTP Status CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/cards/{customerId}/fetch:
    get:
      tags:
        - CRUD REST APIs For Cards Microservice
      summary: Fetch All Cards
      description: REST API to fetch all cards.
      operationId: fetchCardsDetails
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/cards/{customerId}/delete:
    delete:
      tags:
        - CRUD REST APIs For Cards Microservice
      summary: Delete All Cards
      description: REST API to delete all cards.
      operationId: deleteAllCards
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response_OnUpdateAndOnDelete'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/cards/delete/{cardNumber}:
    delete:
      tags:
        - CRUD REST APIs For Cards Microservice
      summary: Delete Card
      description: REST API to delete a card.
      operationId: deleteCard
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            pattern: (^$|[0-9]{12})
            type: string
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response_OnUpdateAndOnDelete'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
components:
  schemas:
    Card:
      required:
        - cardNumber
        - customerId
      type: object
      properties:
        customerId:
          minimum: 1
          type: integer
          description: Customer's Id
          format: int64
        cardNumber:
          pattern: (^$|[0-9]{12})
          type: string
          description: Card Number
        cardType:
          type: string
          description: Name of the customer
          example: Debit Card
        monthlyPurchaseLimit:
          maximum: 100000
          minimum: 2000
          type: integer
          description: Card's monthly purchase limit
          format: int32
        amountUsed:
          type: number
          description: Card's used amount from the monthly purchase limit
        currentAvailableAmount:
          type: number
          description: Card's available balance
      description: Schema to hold Card Information
    Card_OnUpdate:
      type: object
      properties:
        monthlyPurchaseLimit:
          maximum: 100000
          minimum: 2000
          type: integer
          description: Card's monthly purchase limit
          format: int32
      description: Schema to hold Card Information
    Successful_Response:
      type: object
      properties:
        statusCode:
          type: integer
          description: Status Code in the response
          format: int32
        statusMessage:
          type: string
          description: Status Message in the response
        card:
          $ref: '#/components/schemas/Card'
      description: Schema to hold successful Response Information
    Successful_Response_OnUpdateAndOnDelete:
      type: object
      properties:
        statusCode:
          type: integer
          description: Status Code in the response
          format: int32
        statusMessage:
          type: string
          description: Status Message in the response
      description: Schema to hold successful Response Information
    Error_Response:
      type: object
      properties:
        apiPath:
          type: string
          description: API path invoked by client
        errorCode:
          type: string
          description: Error code representing the error that happened
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        errorMessage:
          type: string
          description: Error message representing the error that happened
        errorTime:
          type: string
          description: Time representing when the error happened
          format: date-time
      description: Schema to hold Error Response Information