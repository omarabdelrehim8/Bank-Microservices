openapi: 3.0.1
info:
  title: Accounts Microservice REST API documentation
  description: Microservice demo built to manage a bank's account life cycle
  contact:
    name: Omar Abdel Rehim
    email: omarabdelrehim8@gmail.com
  version: v1
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: CRUD REST APIs For Accounts Microservice
    description: >-
      REST APIs to create, update, fetch and delete accounts and customers
      details
paths:
  /api/customer/update-details:
    put:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Update Customer Details
      description: REST API to update a customer's details
      operationId: updateCustomerDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer_OnUpdate'
        required: true
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '417':
          description: HTTP Status EXPECTATION FAILED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/create:
    post:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Create Account
      description: REST API to create an account for a new customer.
      operationId: createAccountForNewCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer_OnCreate'
        required: true
      responses:
        '201':
          description: HTTP Status CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/add:
    post:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Add Account
      description: REST API to add an additional account to an already existing customer.
      operationId: addAccountForExistingCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer_OnCreate'
        required: true
      responses:
        '201':
          description: HTTP Status CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/fetch-details:
    get:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Fetch Accounts
      description: REST API to fetch all the accounts associated to a customer.
      operationId: fetchAccountsDetails
      parameters:
        - name: customerId
          in: query
          required: true
          schema:
            minimum: 1
            type: string
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/customer/fetch-details:
    get:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Fetch Customer Details
      description: REST API to fetch a customer's details
      operationId: fetchCustomerDetails
      parameters:
        - name: mobileNumber
          in: query
          required: true
          schema:
            pattern: (^$|[0-9]{10})
            type: string
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer_Details_Response'
        '400':
          description: HTTP Status BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/{accountNumber}/delete:
    delete:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Delete Account
      description: >-
        REST API to delete a customer's account. If the account is the last
        account associated to the customer, the customer's details will also be
        deleted.
      operationId: deleteAccount
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            pattern: (^$|[0-9]{10})
            type: string
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Successful_Response'
        '404':
          description: HTTP Status NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '417':
          description: HTTP Status EXPECTATION FAILED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/build-version:
    get:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Get Build Version
      description: REST API to get application's build version
      operationId: getBuildVersion
      responses:
        '200':
          description: HTTP Status OK
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/java-version:
    get:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Get Java Version
      description: REST API to get utilized java version
      operationId: getJavaVersion
      responses:
        '200':
          description: HTTP Status OK
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
  /api/contact-info:
    get:
      tags:
        - CRUD REST APIs For Accounts Microservice
      summary: Get Contact Info
      description: REST API to get contact info details for reaching out in case of any issues
      operationId: getContactInfo
      responses:
        '200':
          description: HTTP Status OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact_Info'
        '500':
          description: HTTP Status INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Response'
components:
  schemas:
    Account:
      type: object
      properties:
        accountNumber:
          type: integer
          description: Account Number of an Account
          format: int64
          example: 1034562573
        accountType:
          type: string
          description: Account Type of an Account
          example: Savings
        branchAddress:
          type: string
          description: Bank's Branch Address
          example: 123 Main Street, New York
      description: Schema to hold Account Information
    Account_Creation_Response:
      type: object
      properties:
        statusCode:
          type: integer
          description: Status Code in the response
          format: int32
        statusMessage:
          type: string
          description: Status Message in the response
        customerId:
          minimum: 1
          type: integer
          description: Customer's Id
          format: int64
        accountNumber:
          type: integer
          description: Account Number of an Account
          format: int64
          example: 1034562573
        accountType:
          type: string
          description: Account Type of an Account
          example: Savings
        branchAddress:
          type: string
          description: Bank's Branch Address
          example: 123 Main Street, New York
      description: Schema to hold account creation information
    Customer_Details_Response:
      type: object
      properties:
        customerId:
          type: integer
          description: Customer's Id
          format: int64
          example: 1
        name:
          type: string
          description: Name of the customer
          example: John Doe
        email:
          type: string
          description: Email of the customer
          example: johndoe@gmail.com
        mobileNumber:
          type: string
          description: Mobile Number of the customer
          example: '3697746682'
        accounts:
          schema:
            type: array
          items:
            $ref: '#/components/schemas/Account'
        cards:
          schema:
            type: array
          items:
            $ref: '#/components/schemas/Card'
      description: Schema to hold customer details
    Customer:
      required:
        - customerId
        - email
        - mobileNumber
        - name
      type: object
      properties:
        customerId:
          minimum: 1
          type: integer
          description: Customer's Id
          format: int64
          example: 1
        name:
          maxLength: 40
          minLength: 5
          type: string
          description: Name of the customer
          example: John Doe
        email:
          type: string
          description: Email of the customer
          example: johndoe@gmail.com
        mobileNumber:
          pattern: (^$|[0-9]{10})
          type: string
          description: Mobile Number of the customer
          example: '3697746682'
      description: Schema to hold Customer Information
    Customer_OnCreate:
      required:
        - email
        - mobileNumber
        - name
      type: object
      properties:
        name:
          maxLength: 40
          minLength: 5
          type: string
          description: Name of the customer
          example: John Doe
        email:
          type: string
          description: Email of the customer
          example: johndoe@gmail.com
        mobileNumber:
          pattern: (^$|[0-9]{10})
          type: string
          description: Mobile Number of the customer
          example: '3697746682'
      description: Schema to hold Customer Information
    Customer_OnUpdate:
      required:
        - customerId
        - email
        - mobileNumber
      type: object
      properties:
        customerId:
          minimum: 1
          type: integer
          description: Customer's Id
          format: int64
        email:
          type: string
          description: Email of the customer
          example: johndoe@gmail.com
        mobileNumber:
          pattern: (^$|[0-9]{10})
          type: string
          description: Mobile Number of the customer
          example: '3697746682'
      description: Schema to hold Customer Information
    Card:
      type: object
      properties:
        cardNumber:
          type: string
          description: Card Number
          example: 106542387848
        cardType:
          type: string
          description: Name of the customer
          example: Debit Card
        monthlyPurchaseLimit:
          type: integer
          description: Card's monthly purchase limit
          format: int32
        amountUsed:
          type: number
          description: Card's used amount from the monthly purchase limit
        currentAvailableAmount:
          type: number
          description: Card's available balance
      description: Schema to hold Card Information
    Error_Response:
      type: object
      properties:
        apiPath:
          type: string
          description: API path invoked by client
        errorCode:
          type: string
          description: Error code representing the error that happened
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        errorMessage:
          type: string
          description: Error message representing the error that happened
        errorTime:
          type: string
          description: Time representing when the error happened
          format: date-time
      description: Schema to hold Error Response Information
    Successful_Response:
      type: object
      properties:
        statusCode:
          type: integer
          description: Status Code in the response
          format: int32
        statusMessage:
          type: string
          description: Status Message in the response
      description: Schema to hold successful Response Information
    Contact_Info:
      type: object
      properties:
        message:
          type: string
          description: Welcome Message
        contactDetails:
          type: object
          description: Contact Details of application owners or developers
          properties:
            name:
              type: string
            email:
              type: string
        onCallSupport:
          type: string
          description: Phone number to call for support
      description: Schema to hold Contact Information