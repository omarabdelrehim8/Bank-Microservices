services:
  accounts:
    image: "omarabdelrehim8/accounts:v1"
    container_name: accounts-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s
      timeout: 5s
      retries: 10
      interval: 10s
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
    depends_on:
      accountsdb:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      kafka:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    image: "omarabdelrehim8/cards:v1"
    container_name: cards-ms
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s
      timeout: 5s
      retries: 10
      interval: 10s
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    depends_on:
      cardsdb:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  configserver:
    image: "omarabdelrehim8/configserver:v1"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s
      timeout: 5s
      retries: 10
      interval: 10s
    environment:
      SPRING_APPLICATION_NAME: "configserver"
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "omarabdelrehim8/eurekaserver:v1"
    ports:
      - "8070:8070"
    container_name: eurekaserver-ms
    depends_on:
      kafka:
        condition: service_healthy
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      start_period: 10s
      timeout: 5s
      retries: 10
      interval: 10s
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  gatewayserver:
    image: "omarabdelrehim8/gatewayserver:v1"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    depends_on:
      kafka:
        condition: service_healthy
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  kafka:
    image: docker.io/bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    healthcheck:
      test: "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"
      start_period: 10s
      timeout: 5s
      retries: 10
      interval: 10s
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093, EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092, EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    extends:
      file: common-config.yml
      service: network-deploy-service

  message:
    image: "omarabdelrehim8/message:v1"
    container_name: message-ms
    depends_on:
      kafka:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-base-config

  redis:
    image: redis
    container_name: redis
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  accountsdb:
    container_name: accountsdb
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsdb:
    container_name: cardsdb
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: cardsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

volumes:
  kafka_data:
    driver: local

networks:
  bank:
    driver: "bridge"
